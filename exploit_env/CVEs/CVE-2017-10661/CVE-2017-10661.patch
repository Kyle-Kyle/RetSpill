diff --git a/fs/timerfd.c b/fs/timerfd.c
index e9c96a0c7..b606bb4e5 100644
--- a/fs/timerfd.c
+++ b/fs/timerfd.c
@@ -42,12 +42,10 @@ struct timerfd_ctx {
 	short unsigned settime_flags;	/* to show in fdinfo */
 	struct rcu_head rcu;
 	struct list_head clist;
-	spinlock_t cancel_lock;
 	bool might_cancel;
 };
 
 static LIST_HEAD(cancel_list);
-static DEFINE_SPINLOCK(cancel_lock);
 
 static inline bool isalarm(struct timerfd_ctx *ctx)
 {
@@ -131,23 +129,14 @@ void timerfd_resume(void)
 	schedule_work(&timerfd_work);
 }
 
-static void __timerfd_remove_cancel(struct timerfd_ctx *ctx)
+static void timerfd_remove_cancel(struct timerfd_ctx *ctx)
 {
 	if (ctx->might_cancel) {
 		ctx->might_cancel = false;
-		spin_lock(&cancel_lock);
 		list_del_rcu(&ctx->clist);
-		spin_unlock(&cancel_lock);
 	}
 }
 
-static void timerfd_remove_cancel(struct timerfd_ctx *ctx)
-{
-	spin_lock(&ctx->cancel_lock);
-	__timerfd_remove_cancel(ctx);
-	spin_unlock(&ctx->cancel_lock);
-}
-
 static bool timerfd_canceled(struct timerfd_ctx *ctx)
 {
 	if (!ctx->might_cancel || ctx->moffs != KTIME_MAX)
@@ -158,20 +147,16 @@ static bool timerfd_canceled(struct timerfd_ctx *ctx)
 
 static void timerfd_setup_cancel(struct timerfd_ctx *ctx, int flags)
 {
-	spin_lock(&ctx->cancel_lock);
 	if ((ctx->clockid == CLOCK_REALTIME ||
 	     ctx->clockid == CLOCK_REALTIME_ALARM) &&
 	    (flags & TFD_TIMER_ABSTIME) && (flags & TFD_TIMER_CANCEL_ON_SET)) {
 		if (!ctx->might_cancel) {
 			ctx->might_cancel = true;
-			spin_lock(&cancel_lock);
 			list_add_rcu(&ctx->clist, &cancel_list);
-			spin_unlock(&cancel_lock);
 		}
-	} else {
-		__timerfd_remove_cancel(ctx);
+	} else if (ctx->might_cancel) {
+		timerfd_remove_cancel(ctx);
 	}
-	spin_unlock(&ctx->cancel_lock);
 }
 
 static ktime_t timerfd_get_remaining(struct timerfd_ctx *ctx)
@@ -430,7 +415,6 @@ SYSCALL_DEFINE2(timerfd_create, int, clockid, int, flags)
 		return -ENOMEM;
 
 	init_waitqueue_head(&ctx->wqh);
-	spin_lock_init(&ctx->cancel_lock);
 	ctx->clockid = clockid;
 
 	if (isalarm(ctx))
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index dcdcb8512..39143f5f0 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -2324,13 +2324,13 @@ static int timekeeping_validate_timex(const struct __kernel_timex *txc)
 		/* singleshot must not be used with any other mode bits */
 		if (!(txc->modes & ADJ_OFFSET_SINGLESHOT))
 			return -EINVAL;
-		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
-		    !capable(CAP_SYS_TIME))
-			return -EPERM;
+		// if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		//     !capable(CAP_SYS_TIME))
+		// 	return -EPERM;
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
-		if (txc->modes && !capable(CAP_SYS_TIME))
-			return -EPERM;
+		//if (txc->modes && !capable(CAP_SYS_TIME))
+		//	return -EPERM;
 		/*
 		 * if the quartz is off by more than 10% then
 		 * something is VERY wrong!
@@ -2343,8 +2343,8 @@ static int timekeeping_validate_timex(const struct __kernel_timex *txc)
 
 	if (txc->modes & ADJ_SETOFFSET) {
 		/* In order to inject time, you gotta be super-user! */
-		if (!capable(CAP_SYS_TIME))
-			return -EPERM;
+		//if (!capable(CAP_SYS_TIME))
+		//	return -EPERM;
 
 		/*
 		 * Validate if a timespec/timeval used to inject a time
